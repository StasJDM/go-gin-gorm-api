definitions:
  controllers.CreateUserInput:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  controllers.JWTResponse:
    properties:
      jwt:
        type: string
    type: object
  controllers.UpdateUserInput:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  inputs.CreatePostInput:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  inputs.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  inputs.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Post:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  title: Swagger API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login using username and password
      parameters:
      - description: Login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/inputs.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: jwt
          schema:
            $ref: '#/definitions/controllers.JWTResponse'
      summary: Login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/inputs.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: jwt
          schema:
            $ref: '#/definitions/controllers.JWTResponse'
      summary: Register
      tags:
      - auth
  /posts:
    get:
      consumes:
      - application/json
      description: Fetch all posts (with pagination)
      parameters:
      - in: query
        minimum: 1
        name: pageNumber
        type: integer
      - in: query
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      summary: Find all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create post
      parameters:
      - description: Post json
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/inputs.CreatePostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Create post
      tags:
      - posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      description: Find one post by id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Find post by id
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: Fetch all users (with pagination)
      parameters:
      - in: query
        minimum: 1
        name: pageNumber
        type: integer
      - in: query
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Find all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User json
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Find one user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Find user by id
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: User json
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
